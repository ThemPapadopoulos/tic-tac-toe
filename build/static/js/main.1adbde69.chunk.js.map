{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","onClickEvent","value","Board","initialSquares","Array","fill","useState","squares","setSquares","xIsNext","setXIsNext","renderSquare","i","newSquares","winnerDeclared","Boolean","calculateWinner","squareFilled","handleClickEvent","winner","status","Game","line","a","b","c","ReactDom","render","document","getElementById"],"mappings":"oMAKMA,EAAS,SAACC,GACd,OACE,wBAAQC,UAAU,SAASC,QAASF,EAAMG,aAA1C,SACGH,EAAMI,SAKPC,EAAQ,WACZ,IAAMC,EAAiBC,MAAM,GAAGC,KAAK,MADnB,EAEYC,mBAASH,GAFrB,mBAEXI,EAFW,KAEFC,EAFE,OAGYF,oBAAS,GAHrB,mBAGXG,EAHW,KAGFC,EAHE,KAkBZC,EAAe,SAACC,GACpB,OACE,cAAChB,EAAD,CAAQK,MAAOM,EAAQK,GAAIZ,aAAc,kBAfpB,SAACY,GACxB,IAAMC,EAAU,YAAON,GAEjBO,EAAiBC,QAAQC,EAAgBH,IACzCI,EAAeF,QAAQF,EAAWD,IACpCE,GAAkBG,IAItBJ,EAAWD,GAAKH,EAAU,IAAM,IAChCD,EAAWK,GACXH,GAAYD,IAIqCS,CAAiBN,OAI9DO,EAASH,EAAgBT,GAEzBa,EAASD,EAAM,kBACNA,GADM,sBAEFV,EAAU,IAAM,KAEnC,OACE,sBAAKX,UAAU,SAAf,UACE,8BAAMsB,IACN,sBAAKtB,UAAU,YAAf,UACGa,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKb,UAAU,YAAf,UACGa,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKb,UAAU,YAAf,UACGa,EAAa,GACbA,EAAa,GACbA,EAAa,UAMhBU,EAAO,WACX,OACE,sBAAKvB,UAAU,OAAf,wBAEE,cAACI,EAAD,QAON,SAASc,EAAgBT,GAYvB,IAXA,IAWA,MAXc,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGT,eAAwB,CAAnB,IAAIe,EAAI,KAAW,cACJA,EADI,GACfC,EADe,KACZC,EADY,KACTC,EADS,KAGtB,GAAIlB,EAAQgB,IAAMhB,EAAQgB,KAAOhB,EAAQiB,IAAMjB,EAAQgB,KAAOhB,EAAQkB,GACpE,OAAOlB,EAAQgB,GAGnB,OAAO,KArBTG,IAASC,OAAO,cAACN,EAAD,IAAUO,SAASC,eAAe,W","file":"static/js/main.1adbde69.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDom from \"react-dom\";\n\nimport \"./index.css\";\n\nconst Square = (props) => {\n  return (\n    <button className=\"square\" onClick={props.onClickEvent}>\n      {props.value}\n    </button>\n  );\n};\n\nconst Board = () => {\n  const initialSquares = Array(9).fill(null);\n  const [squares, setSquares] = useState(initialSquares);\n  const [xIsNext, setXIsNext] = useState(true);\n\n  const handleClickEvent = (i) => {\n    const newSquares = [...squares];\n\n    const winnerDeclared = Boolean(calculateWinner(newSquares));\n    const squareFilled = Boolean(newSquares[i]);\n    if (winnerDeclared || squareFilled) {\n      return;\n    }\n\n    newSquares[i] = xIsNext ? \"X\" : \"O\";\n    setSquares(newSquares);\n    setXIsNext(!xIsNext);\n  };\n  const renderSquare = (i) => {\n    return (\n      <Square value={squares[i]} onClickEvent={() => handleClickEvent(i)} />\n    );\n  };\n\n  const winner = calculateWinner(squares);\n\n  const status = winner\n    ? `Winner: ${winner}`\n    : `Next player:${xIsNext ? \"X\" : \"O\"}`;\n\n  return (\n    <div className=\"status\">\n      <div>{status}</div>\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </div>\n  );\n};\n\nconst Game = () => {\n  return (\n    <div className=\"game\">\n      Tic-Tac-Toe\n      <Board />\n    </div>\n  );\n};\n\nReactDom.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8], //rows\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8], // columns\n    [0, 4, 8],\n    [2, 4, 6], //diagonal\n  ];\n\n  for (let line of lines) {\n    const [a, b, c] = line;\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a]; // 'X' or 'O'\n    }\n  }\n  return null;\n}\n"],"sourceRoot":""}